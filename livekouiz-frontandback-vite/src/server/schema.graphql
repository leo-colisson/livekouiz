type Room {
  name: String!
  adminHashedPassword: String!
  token: String!
}

type QuestionMultipleChoice {
  question: String
  nbChoices: Int!
}
input QuestionMultipleChoiceInput {
  question: String
  nbChoices: Int!
}

type QuestionText {
  question: String
}
input QuestionTextInput {
  question: String
}

type QuestionNumber {
  question: String
}
input QuestionNumberInput {
  question: String
}

union Question = QuestionMultipleChoice | QuestionText | QuestionNumber
# Note the greatest way to allow union type as input IMO... But that's graphQL life.
input QuestionInput @oneOf {
  QuestionMultipleChoice: QuestionMultipleChoiceInput
  QuestionText: QuestionTextInput
  QuestionNumber: QuestionNumberInput
}

### Errors

type WrongPassword {
  _: Boolean # Objects must be non-empty...
}

type WrongToken {
  _: Boolean
}

type Success {
  _: Boolean
}

type Query {
  hello: String
}

type Subscription {
  hello: String
  questions(roomName: String!): Question
}

union NewRoomResult = Room | WrongPassword
union NewQuestionResult = QuestionMultipleChoice | QuestionText | QuestionNumber | WrongToken
type Mutation {
  newRoom(roomName: String!, password: String!): NewRoomResult
  newQuestion(roomName: String!, token: String!, question: QuestionInput!): NewQuestionResult
}
